{
  "db": "PostgreSQL",
  "0cfa774a2cce1f084fa5cff3d3ee5631dbec2198bdb23b8eab7ab0d5f68e586f": {
    "describe": {
      "columns": [
        {
          "name": "slot_number",
          "ordinal": 0,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": []
      }
    },
    "query": "\n            SELECT slot_number\n            FROM block_production\n            ORDER BY slot_number ASC\n            LIMIT 1\n            "
  },
  "567c4f271b33e91b4fd31cca7057c03aed3fc1c1b91b21090e4d17f1c2cc6b56": {
    "describe": {
      "columns": [
        {
          "name": "timestamp",
          "ordinal": 0,
          "type_info": "Timestamptz"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": []
      }
    },
    "query": "SELECT timestamp FROM blocks ORDER BY timestamp DESC LIMIT 1"
  },
  "84a32e140e6b60371040d71497cc0ff346dae0f3cf0aa5addeca42b4c057d28f": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Int8",
          "Int8",
          "Varchar",
          "Varchar",
          "Varchar",
          "TextArray"
        ]
      }
    },
    "query": "\n                INSERT INTO block_production (slot_number, block_number, block_hash, builder_pubkey, proposer_pubkey, relays)\n                VALUES ($1, $2, $3, $4, $5, $6)\n                ON CONFLICT (slot_number, block_number, block_hash)\n                DO UPDATE\n                    SET relays = ARRAY (SELECT DISTINCT UNNEST(block_production.relays || $6))\n                "
  },
  "f4cd3ab3f47218bf045071d431a2ccdfe4ab5af9a034150abc3fae484947b704": {
    "describe": {
      "columns": [
        {
          "name": "count",
          "ordinal": 0,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        null
      ],
      "parameters": {
        "Left": []
      }
    },
    "query": "WITH inserted_rows as (\nINSERT INTO\n   transactions_data\n   SELECT\n      \"NEST2\".transaction_hash,\n      min(\"NEST2\".tbn) AS blocknumber,\n      min(\"NEST2\".minertx) AS minertransaction,\n      max(\"NEST2\".lowbasefee) AS lowbasefee,\n      max(\"NEST2\".congestion) AS congested,\n      CASE\n         WHEN\n            count(DISTINCT \"NEST2\".block_number) > 0\n            AND max(\"NEST2\".lowbasefee) < 1\n         THEN\n            max(\"NEST2\".lowfeetip)\n         ELSE\n            0\n      END\n      AS lowtip, min(\"NEST2\".blockts) AS mined, max(\"NEST2\".delay) AS delay, array_agg(DISTINCT \"NEST2\".blacklist) AS blacklist, count(DISTINCT \"NEST2\".block_number) AS blocksdelay\n   FROM\n      (\n         SELECT\n            \"NEST\".minertx,\n            \"NEST\".tbn,\n            \"NEST\".blockts,\n            \"NEST\".prevts,\n            \"NEST\".transaction_hash,\n            blocks.block_number,\n            CASE\n               WHEN\n                  \"NEST\".bf < blocks.base_fee_per_gas\n               THEN\n                  1\n               ELSE\n                  0\n            END\n            AS lowbasefee,\n            CASE\n               WHEN\n                  (\n                     \"NEST\".bf - blocks.base_fee_per_gas\n                  )\n                  >= 1000000000 AND \"NEST\".pf>=1000000000 and tt=2\n               THEN\n                  0\n            WHEN\n                    (\n                     \"NEST\".bf - blocks.base_fee_per_gas\n                  )\n                  >= 1000000000 AND tt=0\n                  THEN 0\n               ELSE\n                  1\n            END\n            AS lowfeetip, blocks.gas_limit AS gaslimit, blocks.gas_used AS gasused, \"NEST\".gas,\n            CASE\n               WHEN\n                  \"NEST\".gas > (blocks.gas_limit - blocks.gas_used)\n               THEN\n                  1\n               ELSE\n                  0\n            END\n            AS congestion, \"NEST\".delay, \"NEST\".blacklist\n         FROM\n            (\n               SELECT\n                  transactions.transaction_hash,\n                  min(transactions.block_number) AS tbn,\n                  CASE\n                     WHEN\n                        min(transactions.max_fee_per_gas) IS NOT NULL\n                     THEN\n                        min(transactions.max_fee_per_gas)\n                     ELSE\n                        min(transactions.gas_price)\n                  END\n                  AS bf,\n                  min(transactions.max_priority_fee_per_gas) as pf,\n                  min (transactions.transaction_type) as tt,\n                   min(transactions.gas) AS gas, min(blocks_1.\"timestamp\") AS blockts, min(mempool_timestamps.\"timestamp\") AS memts,\n                  CASE\n                     WHEN\n                        (\n                           min(extract(epoch\n                        FROM\n                           blocks_1.\"timestamp\")) - ((\n                           SELECT\n                              percentile_cont(0.5) WITHIN GROUP (\n                           ORDER BY\n(mempool_timestamps.timestamp_unix)) AS percentile_cont))\n                        )\n                        <= 0\n                     THEN\n                        0\n                     ELSE\n                        min(extract(epoch\n               FROM\n                  blocks_1.\"timestamp\")) - greatest(extract(epoch\n               FROM\n                  min(transactions.prev_nonce_timestamp)),\n                  (\n(\n                     SELECT\n                        percentile_cont(0.5) WITHIN GROUP (\n                     ORDER BY\n(mempool_timestamps.timestamp_unix)) AS percentile_cont)\n                  )\n)\n                  END\n                  AS delay,\n                  CASE\n                     WHEN\n                        (\n                           min(extract(epoch\n                        FROM\n                           blocks_1.\"timestamp\")) - ((\n                           SELECT\n                              percentile_cont(0.5) WITHIN GROUP (\n                           ORDER BY\n(mempool_timestamps.timestamp_unix)) AS percentile_cont))\n                        )\n                        <= 0\n                     THEN\n                        1\n                     ELSE\n                        0\n                  END\n                  AS minertx, min(blocks_1.block_number) AS bn, max(transaction_blacklists.blacklist_id) AS blacklist, min(transactions.prev_nonce_timestamp) AS prevts\n               FROM\n                  transactions\n                  LEFT JOIN\n                     blocks blocks_1\n                     ON blocks_1.block_number = transactions.block_number\n                  LEFT JOIN\n                     (\n                        SELECT\n                           \"NEST2_1\".transaction_hash,\n                           min(\"NEST2_1\".blacklist_id) AS blacklist_id\n                        FROM\n                           (\n                              SELECT\n                                 \"NEST_1\".transaction_hash,\n                                 \"NEST_1\".trace,\n                                 blacklist_entries.display_name,\n                                 blacklist_entries.blacklist_id\n                              FROM\n                                 (\n                                    SELECT\n                                       transactions_1.transaction_hash,\n                                       unnest(transactions_1.address_trace) AS trace,\n                                       transactions_1.block_timestamp\n                                    FROM\n                                       transactions transactions_1\n                                 )\n                                 \"NEST_1\"\n                                 LEFT JOIN\n                                    blacklist_entries\n                                    ON blacklist_entries.address = \"NEST_1\".trace\n                              WHERE\n                                 (\n                                    \"NEST_1\".trace IN\n                                    (\n                                       SELECT\n                                          blacklist_entries_1.address\n                                       FROM\n                                          blacklist_entries blacklist_entries_1\n                                    )\n                                 )\n                                 AND \"NEST_1\".block_timestamp > blacklist_entries.date_added\n                           )\n                           \"NEST2_1\"\n                        GROUP BY\n                           \"NEST2_1\".transaction_hash\n                     )\n                     transaction_blacklists\n                     ON transaction_blacklists.transaction_hash = transactions.transaction_hash\n                  LEFT JOIN\n                     mempool_timestamps\n                     ON mempool_timestamps.transaction_hash = transactions.transaction_hash\n               WHERE\n                  transactions.block_timestamp > (\n                  SELECT\n                     GREATEST('2020-01-01', MAX(transactions_data.mined))\n                  from\n                     transactions_data)\n                  GROUP BY\n                     transactions.transaction_hash,\n                     blocks_1.gas_limit,\n                     blocks_1.gas_used\n            )\n            \"NEST\"\n            LEFT JOIN\n               blocks\n               ON blocks.\"timestamp\" > GREATEST (\"NEST\".memts, \"NEST\".prevts)\n               AND blocks.\"timestamp\" < \"NEST\".blockts\n      )\n      \"NEST2\"\n   GROUP BY\n      \"NEST2\".transaction_hash\n   RETURNING 1\n)\n\nSELECT COUNT(*) FROM inserted_rows;\n"
  }
}